
This week’s work involves writing and testing code for managing student records using Django views and templates.
While we’ve implemented pagination for listing students, using Django Admin effectively can support rapid testing, data entry,
and debugging during development.

Customizing the Django Admin can:
- Reduce time spent manually creating test data.
- Improve clarity and usability when browsing related data.
- Enable faster validation of code changes without requiring custom forms or templates.


Proposed Customizations

A. Add List Filters for Student Attributes: Helps quickly filter students based on attributes like enrollment year,
major, or active status. This is particularly useful for testing pagination and querying logic in the views.

@admin.register(Student)
class StudentAdmin(admin.ModelAdmin):
    list_display = ('first_name', 'last_name', 'enrollment_year', 'major')
    list_filter = ('enrollment_year', 'major')

Using this customization, we can improves navigation and allows you to test how pagination and filtering
interact with the current list view implementation.